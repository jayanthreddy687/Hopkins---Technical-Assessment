"""Service for exporting analysis results."""

from typing import List
from models.schemas import AnalysisResponse, DocumentAnalysis, CategoryCounts
from core.logging import get_logger

logger = get_logger(__name__)


class ExportService:
    """
    Service for exporting analysis results in various formats.
    
    Currently supports Markdown format for easy readability.
    """
    
    def generate_markdown_report(self, analysis: AnalysisResponse) -> str:
        """
        Generate comprehensive Markdown report from analysis results.
        
        Args:
            analysis: Complete analysis response
            
        Returns:
            Markdown-formatted report string
        """
        logger.info("Generating Markdown report")
        
        sections = [
            self._generate_header(),
            self._generate_executive_summary(analysis.summary_text),
            self._generate_overview_section(analysis.aggregate.dict()),
            self._generate_document_details(analysis.docs),
            self._generate_errors_section(analysis.errors)
        ]
        
        report = '\n\n'.join(filter(None, sections))
        
        logger.info(f"Markdown report generated ({len(report)} characters)")
        return report
    
    def _generate_header(self) -> str:
        """Generate report header."""
        return "# VDR Analysis Summary\n\n*Generated by VDR Lite + LLM*"
    
    def _generate_executive_summary(self, summary_text: str) -> str:
        """
        Generate executive summary section.
        
        Args:
            summary_text: Executive summary text
            
        Returns:
            Formatted markdown section
        """
        if not summary_text:
            return ""
        
        return f"## Executive Summary\n\n{summary_text}"
    
    def _generate_overview_section(self, aggregate: dict) -> str:
        """
        Generate analysis overview section with counts.
        
        Args:
            aggregate: Aggregated counts dictionary
            
        Returns:
            Formatted markdown section
        """
        lines = ["## Analysis Overview"]
        
        # Category order for display
        categories = ["financial", "legal", "commercial", "operations", "other"]
        
        for category in categories:
            counts = aggregate.get(category, {})
            facts = counts.get("facts", 0)
            red_flags = counts.get("red_flags", 0)
            
            if facts > 0 or red_flags > 0:
                lines.append(f"\n### {category.title()}")
                lines.append(f"- Facts: {facts}")
                lines.append(f"- Red Flags: {red_flags}")
        
        return '\n'.join(lines)
    
    def _generate_document_details(
        self,
        documents: List[DocumentAnalysis]
    ) -> str:
        """
        Generate detailed document analysis section.
        
        Args:
            documents: List of document analyses
            
        Returns:
            Formatted markdown section
        """
        if not documents:
            return ""
        
        lines = ["## Document Analysis"]
        
        for doc in documents:
            lines.append(f"\n### {doc.doc}")
            # Category is already a string due to use_enum_values = True in schema
            category_name = doc.category if isinstance(doc.category, str) else doc.category.value
            lines.append(f"**Category:** {category_name.title()}")
            
            if doc.facts:
                lines.append("\n**Key Facts:**")
                for fact in doc.facts:
                    lines.append(f"- {fact}")
            
            if doc.red_flags:
                lines.append("\n**Red Flags:**")
                for flag in doc.red_flags:
                    lines.append(f"- ⚠️ {flag}")
        
        return '\n'.join(lines)
    
    def _generate_errors_section(self, errors: List[str]) -> str:
        """
        Generate errors section if any errors occurred.
        
        Args:
            errors: List of error messages
            
        Returns:
            Formatted markdown section or empty string
        """
        if not errors:
            return ""
        
        lines = ["## Processing Errors"]
        for error in errors:
            lines.append(f"- {error}")
        
        return '\n'.join(lines)

